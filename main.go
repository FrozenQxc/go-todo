package main

import (
	"log"

	"github.com/gofiber/fiber/v3"
)

type Todo struct {
	ID        int    `json:"id"`
	Title     string `json:"title"`
	Completed bool   `json:"completed"`
}

func main() {
	app := fiber.New()

	todos := []Todo{}

	app.Get("/", func(c fiber.Ctx) error {
		return c.SendString("Hello, World üëã!")
	})

	app.Post("/api/todos", func(c fiber.Ctx) error {
		var todo Todo

		// –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É Todo —Å –ø–æ–º–æ—â—å—é Bind
		if err := c.Bind().Body(&todo); err != nil {
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
				"error": "Invalid request body",
			})
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –µ—Å–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
		if todo.Title == "" {
			return c.Status(400).JSON(fiber.Map{
				"error": "Title is required",
			})
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫
		todo.ID = len(todos) + 1
		todos = append(todos, todo)

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –≤ –æ—Ç–≤–µ—Ç–µ
		return c.Status(201).JSON(todo)
	})

	log.Fatal(app.Listen(":3000"))
}
